"""Helper for HomematicIP Cloud Tests."""

import asyncio
import json
from unittest.mock import AsyncMock, patch

from homematicip.events.event_manager import EventManager
from homematicip.events.event_types import ModelUpdateEvent
from homematicip.model.model import build_model_from_json
from homematicip.model.model_components import Device, Group
from homematicip.runner import Runner

from homeassistant import config_entries
from homeassistant.components.homematicip_cloud import DOMAIN as HMIPC_DOMAIN
from homeassistant.components.homematicip_cloud.generic_entity import (
    ATTR_IS_GROUP,
    ATTR_MODEL_TYPE,
)
from homeassistant.components.homematicip_cloud.hap import HomematicipHAP
from homeassistant.core import HomeAssistant
from homeassistant.setup import async_setup_component

from tests.common import load_fixture

HAPID = "3014F7110000000000000001"
HAPPIN = "5678"
AUTH_TOKEN = "1234"
FIXTURE_DATA = load_fixture("homematicip_cloud.json", "homematicip_cloud")


def get_and_check_entity_basics(hass, mock_hap, entity_id, entity_name, device_model):
    """Get and test basic device."""
    ha_state = hass.states.get(entity_id)
    assert ha_state is not None
    if device_model:
        assert ha_state.attributes[ATTR_MODEL_TYPE] == device_model
    assert ha_state.name == entity_name

    hmip_device = mock_hap.hmip_device_by_entity_id.get(entity_id)

    if hmip_device:
        if isinstance(hmip_device, Device):
            assert ha_state.attributes[ATTR_IS_GROUP] is False
        elif isinstance(hmip_device, Group):
            assert ha_state.attributes[ATTR_IS_GROUP]
    return ha_state, hmip_device


async def async_manipulate_test_data(
    hass, hmip_device, attribute, new_value, channel=1, fire_device=None
):
    """Set new value on hmip device."""
    if channel == 1:
        setattr(hmip_device, attribute, new_value)
    if hasattr(hmip_device, "functionalChannels"):
        functional_channel = hmip_device.functionalChannels[str(channel)]
        setattr(functional_channel, attribute, new_value)

    fire_target = hmip_device if fire_device is None else fire_device

    # if isinstance(fire_target, AsyncHome):
    #     fire_target.fire_update_event(fire_target._rawJSONData)
    # else:
    fire_target.fire_on_update()

    await hass.async_block_till_done()


class HomeFactory:
    """Factory to create a HomematicIP Cloud Home."""

    def __init__(
        self,
        hass: HomeAssistant,
        mock_connection,
        hmip_config_entry: config_entries.ConfigEntry,
    ) -> None:
    ) -> None:
        """Initialize the Factory."""
        self.hass = hass
        self.mock_connection = mock_connection
        self.hmip_config_entry = hmip_config_entry

    async def async_get_mock_hap(
        self, test_devices=None, test_groups=None
        self, test_devices=None, test_groups=None
    ) -> HomematicipHAP:
        """Create a mocked homematic access point."""
        home_name = self.hmip_config_entry.data["name"]
        mock_runner = RunnerMock(
            connection=self.mock_connection,
            home_name=home_name,
            test_devices=test_devices,
            test_groups=test_groups,
        ).get_async_home_mock()

        self.hmip_config_entry.add_to_hass(self.hass)
        with patch(
            "homeassistant.components.homematicip_cloud.hap.HomematicipHAP.get_runner",
            return_value=mock_runner,
        ):
            assert await async_setup_component(self.hass, HMIPC_DOMAIN, {})

        await self.hass.async_block_till_done()

        hap = self.hass.data[HMIPC_DOMAIN][HAPID]
        mock_runner.event_manager.subscribe(
            ModelUpdateEvent.ITEM_UPDATED, hap.async_update
        )
        mock_runner.event_manager.subscribe(
            ModelUpdateEvent.ITEM_CREATED, hap.async_create_entity
        )
        return hap


class RunnerMock(Runner):
    """Home template as builder for home mock.

    It is based on the upstream libs home class to generate hmip devices
    and groups based on the given homematicip_cloud.json.

    All further testing activities should be done by using the AsyncHome mock,
    that is generated by get_async_home_mock(self).

    The class also generated mocks of devices and groups for further testing.
    """

    def __init__(
        self, connection=None, home_name="", test_devices=None, test_groups=None
    ) -> None:
    _typeClassMap = TYPE_CLASS_MAP
    _typeGroupMap = TYPE_GROUP_MAP
    _typeSecurityEventMap = TYPE_SECURITY_EVENT_MAP

    def __init__(
        self, connection=None, home_name="", test_devices=None, test_groups=None
    ):
        """Init template with connection."""
        super().__init__()  # Call the __init__ method from the base class
        self._rest_connection = connection
        self.name = home_name
        self.label = "Home"
        self.model_type = "HomematicIP Home"
        self.test_devices = test_devices if test_devices is not None else []
        self.test_groups = test_groups if test_groups is not None else []
        self.event_manager = EventManager()

        self.init_json_state = json.loads(FIXTURE_DATA)
        self._init_model(self.init_json_state)
        self._cleanup_model()

    def _cleanup_model(self):
        """Remove all devices and groups from model, which are not in test_devices or test_groups."""
        self.model.devices = {key: self.model.devices[key] for key in self.test_devices}
        self.model.groups = {key: self.model.groups[key] for key in self.test_groups}

    def _init_model(self, json_state, clearConfig: bool = False):
        """Update home and ensure that mocks are created."""
        self.model = build_model_from_json(json_state)

    async def async_get_current_state(self):
        """Return the initial json config."""
        return self.init_json_state

    async def async_initialize_runner(self):
        """Do nothing because its a mock."""

    async def async_initialize_runner_without_init_model(self):
        """Do nothing because its a mock."""

    async def async_listening_for_updates(self):
        """Do nothing but sleeping because its a mock."""
        while True:
            asyncio.sleep(1)
            yield

    @property
    def rest_connection(self):
        """Return the rest connection."""
        return self._rest_connection

    @property
    def websocket_connected(self):
        """Return if the websocket is connected."""
        return True

    def get_async_home_mock(self):
        """Create Mock for Async_Home. based on template to be used for testing.

        It adds collections of mocked devices and groups to the home objects,
        and sets required attributes.
        """
        mock_home = AsyncMock(
            spec=Runner, wraps=self, label="Home", modelType="HomematicIP Home"
        )
        mock_home.__dict__.update(self.__dict__)

        return mock_home
